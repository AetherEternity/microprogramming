# 1 "main.cpp"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "main.cpp"
# 1 "font.cpp" 1
unsigned char ba[7][5] ={
{0,1,1,1,0},
{1,0,0,0,1},
{1,0,0,0,1},
{1,1,1,1,1},
{1,0,0,0,1},
{1,0,0,0,1},
{1,0,0,0,1}};

unsigned char bb[7][5]={
{1,1,1,1,0},
{1,0,0,0,1},
{1,0,0,0,1},
{1,1,1,1,0},
{1,0,0,0,1},
{1,0,0,0,1},
{1,1,1,1,0}};

unsigned char bc[7][5]={
{0,1,1,1,1},
{1,0,0,0,0},
{1,0,0,0,0},
{1,0,0,0,0},
{1,0,0,0,0},
{1,0,0,0,0},
{0,1,1,1,1}};

unsigned char bd[7][5]={
{1,1,1,1,0},
{1,0,0,0,1},
{1,0,0,0,1},
{1,0,0,0,1},
{1,0,0,0,1},
{1,0,0,0,1},
{1,1,1,1,0}};

unsigned char be[7][5]={
{1,1,1,1,1},
{1,0,0,0,0},
{1,0,0,0,0},
{1,1,1,1,1},
{1,0,0,0,0},
{1,0,0,0,0},
{1,1,1,1,1}};

unsigned char bf[7][5]={
{1,1,1,1,1},
{1,0,0,0,0},
{1,0,0,0,0},
{1,1,1,0,0},
{1,0,0,0,0},
{1,0,0,0,0},
{1,0,0,0,0}};

unsigned char bg[7][5]={
{0,1,1,1,1},
{1,0,0,0,0},
{1,0,0,0,0},
{1,0,1,1,1},
{1,0,0,0,1},
{1,0,0,0,1},
{0,1,1,1,0}};

unsigned char bh[7][5]={
{1,0,0,0,1},
{1,0,0,0,1},
{1,0,0,0,1},
{1,1,1,1,1},
{1,0,0,0,1},
{1,0,0,0,1},
{1,0,0,0,1}};

unsigned char li[7][5]={
{0,0,1,0,0},
{0,0,0,0,0},
{0,0,1,0,0},
{0,0,1,0,0},
{0,0,1,0,0},
{0,0,1,0,0},
{0,0,1,0,0}};

unsigned char lj[7][5]={
{0,0,0,1,0},
{0,0,0,0,0},
{0,0,0,1,0},
{0,0,0,1,0},
{0,0,0,1,0},
{0,0,0,1,0},
{0,1,1,0,0}};

unsigned char bk[7][5]={
{1,0,0,0,1},
{1,0,0,1,0},
{1,0,1,0,0},
{1,1,0,0,0},
{1,0,1,0,0},
{1,0,0,1,0},
{1,0,0,0,1}};

unsigned char bl[7][5]={
{1,0,0,0,0},
{1,0,0,0,0},
{1,0,0,0,0},
{1,0,0,0,0},
{1,0,0,0,0},
{1,0,0,0,0},
{1,1,1,1,1}};

unsigned char bm[7][5]={
{1,1,0,1,1},
{1,0,1,0,1},
{1,0,1,0,1},
{1,0,0,0,1},
{1,0,0,0,1},
{1,0,0,0,1},
{1,0,0,0,1}};

unsigned char bn[7][5]={
{1,0,0,0,1},
{1,1,0,0,1},
{1,1,0,0,1},
{1,0,1,0,1},
{1,0,0,1,1},
{1,0,0,1,1},
{1,0,0,0,1}};

unsigned char bo[7][5]={
{0,1,1,1,0},
{1,0,0,0,1},
{1,0,0,0,1},
{1,0,0,0,1},
{1,0,0,0,1},
{1,0,0,0,1},
{0,1,1,1,0}};

unsigned char bp[7][5]={
{1,1,1,1,0},
{1,0,0,0,1},
{1,0,0,0,1},
{1,1,1,1,0},
{1,0,0,0,0},
{1,0,0,0,0},
{1,0,0,0,0}};

unsigned char lq[7][5]={
{0,1,1,0,1},
{1,0,0,1,1},
{1,0,0,1,1},
{0,1,1,0,1},
{0,0,0,0,1},
{0,0,0,0,1},
{0,0,0,0,1}};

unsigned char br[7][5]={
{1,1,1,1,0},
{1,0,0,0,1},
{1,0,0,0,1},
{1,1,1,1,0},
{1,0,1,0,0},
{1,0,0,1,0},
{1,0,0,0,1}};

unsigned char bs[7][5]={
{0,1,1,1,0},
{1,0,0,0,1},
{1,0,0,0,0},
{0,1,1,1,0},
{0,0,0,0,1},
{1,0,0,0,1},
{0,1,1,1,0}};

unsigned char bt[7][5]={
{1,1,1,1,1},
{0,0,1,0,0},
{0,0,1,0,0},
{0,0,1,0,0},
{0,0,1,0,0},
{0,0,1,0,0},
{0,0,1,0,0}};

unsigned char bu[7][5]={
{1,0,0,0,1},
{1,0,0,0,1},
{1,0,0,0,1},
{1,0,0,0,1},
{1,0,0,0,1},
{1,0,0,0,1},
{0,1,1,1,0}};

unsigned char bv[7][5]={
{1,0,0,0,1},
{1,0,0,0,1},
{1,0,0,0,1},
{0,1,0,1,0},
{0,1,0,1,0},
{0,0,1,0,0},
{0,0,1,0,0}};

unsigned char bw[7][5]={
{1,0,0,0,1},
{1,0,0,0,1},
{1,0,0,0,1},
{1,0,1,0,1},
{1,0,1,0,1},
{1,0,1,0,1},
{0,1,0,1,0}};

unsigned char bx[7][5]={
{1,0,0,0,1},
{0,1,0,1,0},
{0,1,0,1,0},
{0,0,1,0,0},
{0,1,0,1,0},
{0,1,0,1,0},
{1,0,0,0,1}};

unsigned char by[7][5]={
{1,0,0,0,1},
{0,1,0,1,0},
{0,0,1,0,0},
{0,0,1,0,0},
{0,0,1,0,0},
{0,0,1,0,0},
{0,0,1,0,0}};


unsigned char bz[7][5]={
{1,1,1,1,1},
{0,0,0,0,1},
{0,0,0,1,0},
{0,0,1,0,0},
{0,1,0,0,0},
{1,0,0,0,0},
{1,1,1,1,1}};

unsigned char num0[7][5]={
{0,1,1,1,0},
{1,0,0,1,1},
{1,0,1,0,1},
{1,0,1,0,1},
{1,0,1,0,1},
{1,1,0,0,1},
{0,1,1,1,0}};

unsigned char num1[7][5]={
{0,0,0,0,1},
{0,0,0,0,1},
{0,0,0,0,1},
{0,0,0,0,1},
{0,0,0,0,1},
{0,0,0,0,1},
{0,0,0,0,1}};

unsigned char num2[7][5]={
{0,1,1,1,0},
{1,0,0,0,1},
{0,0,0,1,0},
{0,0,1,0,0},
{0,1,0,0,0},
{1,0,0,0,0},
{1,1,1,1,1}};

unsigned char num3[7][5]={
{0,1,1,1,0},
{1,0,0,0,1},
{0,0,0,0,1},
{0,1,1,1,0},
{0,0,0,0,1},
{1,0,0,0,1},
{0,1,1,1,0}};

unsigned char num4[7][5]={
{1,0,0,0,1},
{1,0,0,0,1},
{1,0,0,0,1},
{1,1,1,1,1},
{0,0,0,0,1},
{0,0,0,0,1},
{0,0,0,0,1}};

unsigned char num5[7][5]={
{1,1,1,1,1},
{1,0,0,0,0},
{1,0,0,0,0},
{1,1,1,1,0},
{0,0,0,0,1},
{0,0,0,0,1},
{1,1,1,1,0}};

unsigned char num6[7][5]={
{1,1,1,1,1},
{1,0,0,0,0},
{1,0,0,0,0},
{1,1,1,1,1},
{1,0,0,0,1},
{1,0,0,0,1},
{1,1,1,1,1}};

unsigned char num7[7][5]={
{1,1,1,1,1},
{0,0,0,0,1},
{0,0,0,0,1},
{0,0,0,0,1},
{0,0,0,0,1},
{0,0,0,0,1},
{0,0,0,0,1}};

unsigned char num8[7][5]={
{0,1,1,1,0},
{1,0,0,0,1},
{1,0,0,0,1},
{0,1,1,1,0},
{1,0,0,0,1},
{1,0,0,0,1},
{0,1,1,1,0}};

unsigned char num9[7][5]={
{0,1,1,1,0},
{1,0,0,0,1},
{1,0,0,0,1},
{0,1,1,1,0},
{0,0,0,0,1},
{0,0,0,0,1},
{0,1,1,1,0}};

unsigned char underLine[7][5]={
{0,0,0,0,0},
{0,0,0,0,0},
{0,0,0,0,0},
{0,0,0,0,0},
{0,0,0,0,0},
{0,0,0,0,0},
{1,1,1,1,1}};

unsigned char minus[7][5] ={
{0,0,0,0,0},
{0,0,0,0,0},
{0,0,0,0,0},
{0,1,1,1,0},
{0,0,0,0,0},
{0,0,0,0,0},
{0,0,0,0,0}};

unsigned char plus[7][5]={
{0,0,0,0,0},
{0,0,0,0,0},
{0,0,1,0,0},
{0,1,1,1,0},
{0,0,1,0,0},
{0,0,0,0,0},
{0,0,0,0,0}};

unsigned char equal[7][5]={
{0,0,0,0,0},
{0,0,0,0,0},
{1,1,1,1,1},
{0,0,0,0,0},
{1,1,1,1,1},
{0,0,0,0,0},
{0,0,0,0,0}};


unsigned char leftBracket[7][5]={
{0,0,0,0,1},
{0,0,0,1,0},
{0,0,1,0,0},
{0,0,1,0,0},
{0,0,1,0,0},
{0,0,0,1,0},
{0,0,0,0,1}};

unsigned char rightBracket[7][5]={
{1,0,0,0,0},
{0,1,0,0,0},
{0,0,1,0,0},
{0,0,1,0,0},
{0,0,1,0,0},
{0,1,0,0,0},
{1,0,0,0,0}};

unsigned char exclamationMark[7][5]={
{0,0,1,0,0},
{0,0,1,0,0},
{0,0,1,0,0},
{0,0,1,0,0},
{0,0,1,0,0},
{0,0,0,0,0},
{0,0,1,0,0}};

unsigned char questionMark[7][5]={
{0,0,1,0,0},
{0,1,0,1,0},
{0,0,0,1,0},
{0,0,1,0,0},
{0,0,1,0,0},
{0,0,0,0,0},
{0,0,1,0,0}};

unsigned char dot[7][5]={
{0,0,0,0,0},
{0,0,0,0,0},
{0,0,0,0,0},
{0,0,0,0,0},
{0,1,1,0,0},
{0,1,1,0,0},
{0,0,0,0,0}};

unsigned char comma[7][5]={
{0,0,0,0,0},
{0,0,0,0,0},
{0,0,0,0,0},
{0,0,0,0,0},
{0,1,1,0,0},
{0,1,1,0,0},
{0,0,1,0,0}};

unsigned char semicolon[7][5]={
{0,1,1,0,0},
{0,1,1,0,0},
{0,0,0,0,0},
{0,0,0,0,0},
{0,1,1,0,0},
{0,1,1,0,0},
{0,0,1,0,0}};

unsigned char colon[7][5]={
{0,1,1,0,0},
{0,1,1,0,0},
{0,0,0,0,0},
{0,0,0,0,0},
{0,1,1,0,0},
{0,1,1,0,0},
{0,0,0,0,0}};

unsigned char gvoid[7][5]={
{0,0,0,0,0},
{0,0,0,0,0},
{0,0,0,0,0},
{0,0,0,0,0},
{0,0,0,0,0},
{0,0,0,0,0},
{0,0,0,0,0}};

struct symbol{
unsigned char printable;
unsigned char glyph[7][5];
};

struct symbol unprintable;
struct symbol space;
struct symbol asciitable[127];

void initascii(){
unprintable.printable=0;
**unprintable.glyph=**gvoid;
space.printable=1;
**space.glyph=**gvoid;
asciitable[0]=unprintable;
asciitable[1]=unprintable;
asciitable[2]=unprintable;
asciitable[3]=unprintable;
asciitable[4]=unprintable;
asciitable[5]=unprintable;
asciitable[6]=unprintable;
asciitable[7]=unprintable;
asciitable[8]=unprintable;
asciitable[9]=unprintable;
asciitable[10]=unprintable;
asciitable[11]=unprintable;
asciitable[12]=unprintable;
asciitable[13]=unprintable;
asciitable[14]=unprintable;
asciitable[15]=unprintable;
asciitable[16]=unprintable;
asciitable[17]=unprintable;
asciitable[18]=unprintable;
asciitable[19]=unprintable;
asciitable[20]=unprintable;
asciitable[21]=unprintable;
asciitable[22]=unprintable;
asciitable[23]=unprintable;
asciitable[24]=unprintable;
asciitable[25]=unprintable;
asciitable[26]=unprintable;
asciitable[27]=unprintable;
asciitable[28]=unprintable;
asciitable[29]=unprintable;
asciitable[30]=unprintable;
asciitable[31]=unprintable;
asciitable[32]=space;
asciitable[33].printable=1;
**asciitable[33].glyph=**exclamationMark;
asciitable[34].printable=1;
**asciitable[34].glyph=**gvoid;
asciitable[35].printable=1;
**asciitable[35].glyph=**gvoid;
asciitable[36].printable=1;
**asciitable[36].glyph=**gvoid;
asciitable[37].printable=1;
**asciitable[37].glyph=**gvoid;
asciitable[38].printable=1;
**asciitable[38].glyph=**gvoid;
asciitable[39].printable=1;
**asciitable[39].glyph=**gvoid;
asciitable[40].printable=1;
**asciitable[40].glyph=**leftBracket;
asciitable[41].printable=1;
**asciitable[41].glyph=**rightBracket;
asciitable[42].printable=1;
**asciitable[42].glyph=**gvoid;
asciitable[43].printable=1;
**asciitable[43].glyph=**plus;
asciitable[44].printable=1;
**asciitable[44].glyph=**comma;
asciitable[45].printable=1;
**asciitable[45].glyph=**minus;
asciitable[46].printable=1;
**asciitable[46].glyph=**dot;
asciitable[47].printable=1;
**asciitable[47].glyph=**gvoid;
asciitable[48].printable=1;
**asciitable[48].glyph=**num0;
asciitable[49].printable=1;
**asciitable[49].glyph=**num1;
asciitable[50].printable=1;
**asciitable[50].glyph=**num2;
asciitable[51].printable=1;
**asciitable[51].glyph=**num3;
asciitable[52].printable=1;
**asciitable[52].glyph=**num4;
asciitable[53].printable=1;
**asciitable[53].glyph=**num5;
asciitable[54].printable=1;
**asciitable[54].glyph=**num6;
asciitable[55].printable=1;
**asciitable[55].glyph=**num7;
asciitable[56].printable=1;
**asciitable[56].glyph=**num8;
asciitable[57].printable=1;
**asciitable[57].glyph=**num9;
asciitable[58].printable=1;
**asciitable[58].glyph=**colon;
asciitable[59].printable=1;
**asciitable[59].glyph=**semicolon;
asciitable[60].printable=1;
**asciitable[60].glyph=**gvoid;
asciitable[61].printable=1;
**asciitable[61].glyph=**equal;
asciitable[62].printable=1;
**asciitable[62].glyph=**gvoid;
asciitable[63].printable=1;
**asciitable[63].glyph=**questionMark;
asciitable[64].printable=1;
**asciitable[64].glyph=**gvoid;
asciitable[65].printable=1;
**asciitable[65].glyph=**ba;
asciitable[66].printable=1;
**asciitable[66].glyph=**bb;
asciitable[67].printable=1;
**asciitable[67].glyph=**bc;
asciitable[68].printable=1;
**asciitable[68].glyph=**bd;
asciitable[69].printable=1;
**asciitable[69].glyph=**be;
asciitable[70].printable=1;
**asciitable[70].glyph=**bf;
asciitable[71].printable=1;
**asciitable[71].glyph=**bg;
asciitable[72].printable=1;
**asciitable[72].glyph=**bh;
asciitable[73].printable=1;
**asciitable[73].glyph=**li;
asciitable[74].printable=1;
**asciitable[74].glyph=**lj;
asciitable[75].printable=1;
**asciitable[75].glyph=**bk;
asciitable[76].printable=1;
**asciitable[76].glyph=**bl;
asciitable[77].printable=1;
**asciitable[77].glyph=**bm;
asciitable[78].printable=1;
**asciitable[78].glyph=**bn;
asciitable[79].printable=1;
**asciitable[79].glyph=**bo;
asciitable[80].printable=1;
**asciitable[80].glyph=**bp;
asciitable[81].printable=1;
**asciitable[81].glyph=**lq;
asciitable[82].printable=1;
**asciitable[82].glyph=**br;
asciitable[83].printable=1;
**asciitable[83].glyph=**bs;
asciitable[84].printable=1;
**asciitable[84].glyph=**bt;
asciitable[85].printable=1;
**asciitable[85].glyph=**bu;
asciitable[86].printable=1;
**asciitable[86].glyph=**bv;
asciitable[87].printable=1;
**asciitable[87].glyph=**bw;
asciitable[88].printable=1;
**asciitable[88].glyph=**bx;
asciitable[89].printable=1;
**asciitable[89].glyph=**by;
asciitable[90].printable=1;
**asciitable[90].glyph=**bz;
asciitable[91].printable=1;
**asciitable[91].glyph=**gvoid;
asciitable[92].printable=1;
**asciitable[92].glyph=**gvoid;
asciitable[93].printable=1;
**asciitable[93].glyph=**gvoid;
asciitable[94].printable=1;
**asciitable[94].glyph=**gvoid;
asciitable[95].printable=1;
**asciitable[95].glyph=**underLine;
asciitable[96].printable=1;
**asciitable[96].glyph=**gvoid;
asciitable[97].printable=1;
**asciitable[97].glyph=**ba;
asciitable[98].printable=1;
**asciitable[98].glyph=**bb;
asciitable[99].printable=1;
**asciitable[99].glyph=**bc;
asciitable[100].printable=1;
**asciitable[100].glyph=**bd;
asciitable[101].printable=1;
**asciitable[101].glyph=**be;
asciitable[102].printable=1;
**asciitable[102].glyph=**bf;
asciitable[103].printable=1;
**asciitable[103].glyph=**bg;
asciitable[104].printable=1;
**asciitable[104].glyph=**bh;
asciitable[105].printable=1;
**asciitable[105].glyph=**li;
asciitable[106].printable=1;
**asciitable[106].glyph=**lj;
asciitable[107].printable=1;
**asciitable[107].glyph=**bk;
asciitable[108].printable=1;
**asciitable[108].glyph=**bl;
asciitable[109].printable=1;
**asciitable[109].glyph=**bm;
asciitable[110].printable=1;
**asciitable[110].glyph=**bn;
asciitable[111].printable=1;
**asciitable[111].glyph=**bo;
asciitable[112].printable=1;
**asciitable[112].glyph=**bp;
asciitable[113].printable=1;
**asciitable[113].glyph=**lq;
asciitable[114].printable=1;
**asciitable[114].glyph=**br;
asciitable[115].printable=1;
**asciitable[115].glyph=**bs;
asciitable[116].printable=1;
**asciitable[116].glyph=**bt;
asciitable[117].printable=1;
**asciitable[117].glyph=**bu;
asciitable[118].printable=1;
**asciitable[118].glyph=**bv;
asciitable[119].printable=1;
**asciitable[119].glyph=**bw;
asciitable[120].printable=1;
**asciitable[120].glyph=**bx;
asciitable[121].printable=1;
**asciitable[121].glyph=**by;
asciitable[122].printable=1;
**asciitable[122].glyph=**bz;
asciitable[123].printable=1;
**asciitable[123].glyph=**gvoid;
asciitable[124].printable=1;
**asciitable[124].glyph=**gvoid;
asciitable[125].printable=1;
**asciitable[125].glyph=**gvoid;
asciitable[126].printable=1;
**asciitable[126].glyph=**gvoid;
asciitable[127]=unprintable;
}
# 2 "main.cpp" 2
void drawLineLow(int x1,int y1,int x2,int y2,int color);
void drawBackGround(int color);
void setPixel(int x,int y,int color);
int abs(int a);
void drawLineHigh(int x0,int y0,int x1,int y1,int color);
void drawLine(int x0,int y0,int x1,int y1,int color);
void drawCircle(int R,int x1,int y1,int color);
void drawSquare(int x0,int y0,int x1,int y1,int color);
void drawChar(int x,int y,int color,int multiplier, char c);
void drawString(char *message,int x,int y,int color,int multiplier,int offset);
int getKey();
int keyPressed();
char *videoAddr;

unsigned char getSeconds(){
 asm("xor eax, eax");
 asm("out 0x70, ax");
 asm("in ax, 0x71");
}

int bcd_to_number(char val)
{
 return ((val & 0xF0) >> 4) * 10 + (val & 0xF);
}


void binify(char* str, unsigned char ch){
 int i;
 for(i=0; i<8; i++){
  if(ch%2){
   str[i]='1';
  }else{
   str[i]='0';
  }
  ch/=2;
 }
}

int _start(){
 videoAddr=*(char**) (0x8000);





 initascii();
 char message[255] = "Your ad here: 8(800)555-35-35";
 drawString(message,0,0,0x00ff00,2,5);

 int current,last,ascii;
 int i,x=0,multiplier=2,offset=5,y=200;
 int startx=x;
 int color=0xffffff;
 int keyToASCII[2][35] = {{16,17,18,19,20,21,22,23,24,25,30,31,32,33,34,35,36,37,38,44,45,46,47,48,49,50,57,28},{113,119,101,114,116,121,117,105,111,112,97,115,100,102,103,104,106,107,108,122,120,99,118,98,110,109,' ','\n'}};

 while(1){
  current=getKey();
  if(last!=current){
   ascii=0;

   for(i=0;i<35;i++){
    if(keyToASCII[0][i] == current){
     ascii=keyToASCII[1][i];
     break;
    }
   }
   if(ascii!=0){
    drawChar(x,600,0xff0000,2,ascii);

    if (ascii==' '){
     x += (5*multiplier) + offset;
     i++;
    } else
    if (ascii=='\n'){
     x=startx;
     y+=offset+(multiplier*7);
     i++;
    } else
    if ((x + (5*multiplier) + offset)>1024){
     x=startx;
     y+=offset+(multiplier*7);
    } else{
    drawChar(x,y,color,multiplier,ascii);
    x += (5*multiplier) + offset;
    i++;
    }
   }




   last=current;
  }
 }




 while(1);
}

int getKey(){
 asm("xor eax,eax");
 asm("in al,0x60");
}

int keyPressed(){
 asm("xor eax,eax");
 asm("in al,0x61");
}

void drawChar(int x,int y,int color,int multiplier, char letter){
 symbol currletter=asciitable[letter];
 if (currletter.printable){
  if (multiplier<=1){
   for (int i=0;i<7;i++){
    for (int j=0;j<5;j++){
     if (currletter.glyph[i][j]){
      setPixel(x+j,y+i,color);
     }
    }
   }
  } else{
   for (int i=0;i<7;i++){
    for (int j=0;j<5;j++){
     if (currletter.glyph[i][j]){
      drawSquare(x+j*multiplier,y+i*multiplier,x+j*multiplier+multiplier,y+i*multiplier+multiplier,color);
     }
    }
   }
  }
 }
}

void drawString(char *message,int x,int y,int color,int multiplier,int offset){
 int i=0;
 int startx=x;
 while (message[i]){
  if (message[i]==' '){
   x += (5*multiplier) + offset;
   i++;
   continue;
  }
  if (message[i]=='\n'){
   x=startx;
   y+=offset+(multiplier*7);
   i++;
   continue;
  }
  if ((x + (5*multiplier) + offset)>1024){
   x=startx;
   y+=offset+(multiplier*7);
  }
  drawChar(x,y,color,multiplier,message[i]);
  x += (5*multiplier) + offset;
  i++;
 }
}


void setPixel(int x,int y,int color){
 char *p;
 p=videoAddr;
 p+=((y*1024)+x)*3;
 *(int*)p=color;
}

int abs(int a){
 if (a>0){
  return a;
 }
 return -a;

}

void drawCircle(int R,int x1,int y1,int color){
 int x = 0;
 int y = R;
 int delta = 1-2*R;
 int error =0;
 while (y>=0){
  setPixel(x1+x,y1+y,color);
  setPixel(x1+x,y1-y,color);
  setPixel(x1-x,y1+y,color);
  setPixel(x1-x,y1-y,color);
  error = 2 * (delta + y) -1;
  if((delta<0)&&(error<=0)){
   delta+=2*++x+1;
   continue;
  }
  error = 2*(delta - x) -1;
  if ((delta>0)&&(error>0)){
   delta += 1 -2*--y;
   continue;
  }
  x++;
  delta += 2*(x-y);
  y--;
 }
}
void drawCircleFill(int R,int x1,int y1,int color){
 int x = 0;
 int y = R;
 int delta = 1-2*R;
 int error =0;
 while (y>=0){
  drawLine(x1+x,y1+y,x1+x,y1-y,color);
  drawLine(x1-x,y1+y,x1-x,y1-y,color);
  error = 2 * (delta + y) -1;
  if((delta<0)&&(error<=0)){
   delta+=2*++x+1;
   continue;
  }
  error = 2*(delta - x) -1;
  if ((delta>0)&&(error>0)){
   delta += 1 -2*--y;
   continue;
  }
  x++;
  delta += 2*(x-y);
  y--;
 }
}


void drawLineLow(int x0,int y0,int x1,int y1,int color){
 int dx = x1-x0;
 int dy = y1-y0;
 int yi = 1;
 if (dy<0){
  yi = -1;
  dy = -dy;
 }
 int D = 2*dy-dx;
 int y = y0;

 for (int x=x0;x<x1;x++){
  setPixel(x,y,color);
  if (D>0){
   y+=yi;
   D-=2*dx;
  }
  D+=2*dy;
 }
}

void drawLineHigh(int x0,int y0,int x1,int y1,int color){
 int dx = x1-x0;
 int dy = y1-y0;
 int xi = 1;
 if (dx<0){
  xi = -1;
  dx = -dx;
 }
 int D = 2*dx -dy;
 int x = x0;

 for (int y = y0;y<y1;y++){
  setPixel(x,y,color);
  if (D>0){
   x+=xi;
   D-=2*dy;
  }
  D+=2*dx;
 }

}

void drawLine(int x0, int y0, int x1, int y1,int color){
 if (abs(y1-y0) <abs(x1-x0)){
  if (x0 > x1){
   drawLineLow(x1,y1,x0,y0,color);
  } else{
   drawLineLow(x0,y0,x1,y1,color);
  }
 }else{
  if (y0 > y1){
   drawLineHigh(x1,y1,x0,y0,color);
  } else {
   drawLineHigh(x0,y0,x1,y1,color);
  }
 }
}


void drawSquare(int x0,int y0,int x1,int y1,int color){
 for (int y=y0;y<y1;y++){
  for (int x=x0;x<x1;x++){
   setPixel(x,y,color);
  }
 }
}

void drawBackGround(int color){
 int i,j,defoltColor;
 defoltColor=color;
 for (i=0;i<768;i++){
  for (j=0;j<1024;j++){
   setPixel(j,i,color);
   if (!(j%5)){
    color+=0x000100;
    }
  }
  color=defoltColor;
 }
}
